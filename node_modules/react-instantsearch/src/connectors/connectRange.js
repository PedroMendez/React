'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _indexUtils = require('../core/indexUtils');

var _createConnector = require('../core/createConnector');

var _createConnector2 = _interopRequireDefault(_createConnector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * connectRange connector provides the logic to create connected
 * components that will give the ability for a user to refine results using
 * a numeric range.
 * @name connectRange
 * @kind connector
 * @requirements The attribute passed to the `attributeName` prop must be holding numerical values.
 * @propType {string} attributeName - Name of the attribute for faceting
 * @propType {{min: number, max: number}} [defaultRefinement] - Default searchState of the widget containing the start and the end of the range.
 * @propType {number} [min] - Minimum value. When this isn't set, the minimum value will be automatically computed by Algolia using the data in the index.
 * @propType {number} [max] - Maximum value. When this isn't set, the maximum value will be automatically computed by Algolia using the data in the index.
 * @providedPropType {function} refine - a function to select a range.
 * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state
 * @providedPropType {string} currentRefinement - the refinement currently applied
 */

function getId(props) {
  return props.attributeName;
}

var namespace = 'range';

function getCurrentRefinement(props, searchState, context) {
  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, namespace + '.' + getId(props), {}, function (currentRefinement) {
    var min = currentRefinement.min,
        max = currentRefinement.max;

    if (typeof min === 'string') {
      min = parseInt(min, 10);
    }
    if (typeof max === 'string') {
      max = parseInt(max, 10);
    }
    return { min: min, max: max };
  });
}

function _refine(props, searchState, nextRefinement, context) {
  if (!isFinite(nextRefinement.min) || !isFinite(nextRefinement.max)) {
    throw new Error("You can't provide non finite values to the range connector");
  }
  var id = getId(props);
  var nextValue = _defineProperty({}, id, nextRefinement);
  var resetPage = true;
  return (0, _indexUtils.refineValue)(searchState, nextValue, context, resetPage, namespace);
}

function _cleanUp(props, searchState, context) {
  return (0, _indexUtils.cleanUpValue)(searchState, context, namespace + '.' + getId(props));
}

exports.default = (0, _createConnector2.default)({
  displayName: 'AlgoliaRange',

  propTypes: {
    id: _propTypes2.default.string,
    attributeName: _propTypes2.default.string.isRequired,
    defaultRefinement: _propTypes2.default.shape({
      min: _propTypes2.default.number.isRequired,
      max: _propTypes2.default.number.isRequired
    }),
    min: _propTypes2.default.number,
    max: _propTypes2.default.number
  },

  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {
    var attributeName = props.attributeName;
    var min = props.min,
        max = props.max;


    var hasMin = typeof min !== 'undefined';
    var hasMax = typeof max !== 'undefined';

    var results = (0, _indexUtils.getResults)(searchResults, this.context);

    if (!hasMin || !hasMax) {
      if (!results) {
        return {
          canRefine: false
        };
      }

      var stats = results.getFacetByName(attributeName) ? results.getFacetStats(attributeName) : null;
      if (!stats) {
        return {
          canRefine: false
        };
      }

      if (!hasMin) {
        min = stats.min;
      }
      if (!hasMax) {
        max = stats.max;
      }
    }

    var count = results ? results.getFacetValues(attributeName).map(function (v) {
      return {
        value: v.name,
        count: v.count
      };
    }) : [];

    var _getCurrentRefinement = getCurrentRefinement(props, searchState, this.context),
        _getCurrentRefinement2 = _getCurrentRefinement.min,
        valueMin = _getCurrentRefinement2 === undefined ? min : _getCurrentRefinement2,
        _getCurrentRefinement3 = _getCurrentRefinement.max,
        valueMax = _getCurrentRefinement3 === undefined ? max : _getCurrentRefinement3;

    return {
      min: min,
      max: max,
      currentRefinement: { min: valueMin, max: valueMax },
      count: count,
      canRefine: count.length > 0
    };
  },
  refine: function refine(props, searchState, nextRefinement) {
    return _refine(props, searchState, nextRefinement, this.context);
  },
  cleanUp: function cleanUp(props, searchState) {
    return _cleanUp(props, searchState, this.context);
  },
  getSearchParameters: function getSearchParameters(params, props, searchState) {
    var attributeName = props.attributeName;

    var currentRefinement = getCurrentRefinement(props, searchState, this.context);
    params = params.addDisjunctiveFacet(attributeName);

    var min = currentRefinement.min,
        max = currentRefinement.max;

    if (typeof min !== 'undefined') {
      params = params.addNumericRefinement(attributeName, '>=', min);
    }
    if (typeof max !== 'undefined') {
      params = params.addNumericRefinement(attributeName, '<=', max);
    }

    return params;
  },
  getMetadata: function getMetadata(props, searchState) {
    var _this = this;

    var id = getId(props);
    var currentRefinement = getCurrentRefinement(props, searchState, this.context);
    var item = void 0;
    var hasMin = typeof currentRefinement.min !== 'undefined';
    var hasMax = typeof currentRefinement.max !== 'undefined';
    if (hasMin || hasMax) {
      var itemLabel = '';
      if (hasMin) {
        itemLabel += currentRefinement.min + ' <= ';
      }
      itemLabel += props.attributeName;
      if (hasMax) {
        itemLabel += ' <= ' + currentRefinement.max;
      }
      item = {
        label: itemLabel,
        currentRefinement: currentRefinement,
        attributeName: props.attributeName,
        value: function value(nextState) {
          return _cleanUp(props, nextState, _this.context);
        }
      };
    }

    return {
      id: id,
      index: (0, _indexUtils.getIndex)(this.context),
      items: item ? [item] : []
    };
  }
});