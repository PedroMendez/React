'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Plugin = require('../Plugin');
var ServiceWorkerStore = require('./ServiceWorkerStore');
var IndexedDBStore = require('./IndexedDBStore'

/**
 * Persistent State
 *
 * Helps debug Uppy: loads saved state from localStorage, so when you restart the page,
 * your state is right where you left off. If something goes wrong, clear uppyState
 * in your localStorage, using the devTools
 *
 */
);module.exports = function (_Plugin) {
  _inherits(RestoreFiles, _Plugin);

  function RestoreFiles(core, opts) {
    _classCallCheck(this, RestoreFiles);

    var _this = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));

    _this.type = 'debugger';
    _this.id = 'RestoreFiles';
    _this.title = 'Restore Files';

    // set default options
    var defaultOptions = {
      serviceWorker: false

      // merge default options with the ones set by user
    };_this.opts = _extends({}, defaultOptions, opts

    // const Store = this.opts.serviceWorker ? ServiceWorkerStore : IndexedDBStore
    );_this.ServiceWorkerStore = _this.opts.serviceWorker ? new ServiceWorkerStore(core) : false;
    _this.IndexedDBStore = new IndexedDBStore(core);

    _this.saveFilesStateToLocalStorage = _this.saveFilesStateToLocalStorage.bind(_this);
    _this.loadFilesStateFromLocalStorage = _this.loadFilesStateFromLocalStorage.bind(_this);
    _this.loadFileBlobsFromServiceWorker = _this.loadFileBlobsFromServiceWorker.bind(_this);
    _this.loadFileBlobsFromIndexedDB = _this.loadFileBlobsFromIndexedDB.bind(_this);
    _this.onBlobsLoaded = _this.onBlobsLoaded.bind(_this);
    return _this;
  }

  RestoreFiles.prototype.loadFilesStateFromLocalStorage = function loadFilesStateFromLocalStorage() {
    var savedState = localStorage.getItem('uppyState');

    if (savedState) {
      this.core.log('Recovered some state from Local Storage');
      this.core.setState(JSON.parse(savedState));
    }
  };

  RestoreFiles.prototype.saveFilesStateToLocalStorage = function saveFilesStateToLocalStorage() {
    var files = JSON.stringify({
      currentUploads: this.core.state.currentUploads,
      files: this.core.state.files
    });
    localStorage.setItem('uppyState', files);
  };

  RestoreFiles.prototype.loadFileBlobsFromServiceWorker = function loadFileBlobsFromServiceWorker() {
    var _this2 = this;

    this.ServiceWorkerStore.list().then(function (blobs) {
      console.log(blobs);
      var numberOfFilesRecovered = Object.keys(blobs).length;
      var numberOfFilesTryingToRecover = Object.keys(_this2.core.state.files).length;
      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {
        _this2.core.log('Successfully recovered ' + numberOfFilesRecovered + ' blobs from Service Worker!');
        _this2.core.info('Successfully recovered ' + numberOfFilesRecovered + ' files', 'success', 3000);
        _this2.onBlobsLoaded(blobs);
      } else {
        _this2.core.log('Failed to recover blobs from Service Worker, trying IndexedDB now...');
        _this2.loadFileBlobsFromIndexedDB();
      }
    });
  };

  RestoreFiles.prototype.loadFileBlobsFromIndexedDB = function loadFileBlobsFromIndexedDB() {
    var _this3 = this;

    this.IndexedDBStore.list().then(function (blobs) {
      var numberOfFilesRecovered = Object.keys(blobs).length;
      if (numberOfFilesRecovered > 0) {
        _this3.core.log('Successfully recovered ' + numberOfFilesRecovered + ' blobs from Indexed DB!');
        _this3.core.info('Successfully recovered ' + numberOfFilesRecovered + ' files', 'success', 3000);
        return _this3.onBlobsLoaded(blobs);
      }
      _this3.core.log('Couldnâ€™t recover anything from IndexedDB :(');
    });
  };

  RestoreFiles.prototype.onBlobsLoaded = function onBlobsLoaded(blobs) {
    var _this4 = this;

    var updatedFiles = _extends({}, this.core.state.files);
    Object.keys(blobs).forEach(function (fileID) {
      var cachedData = blobs[fileID].data;

      var updatedFileData = {
        data: cachedData,
        isRestored: true
      };
      var updatedFile = _extends({}, updatedFiles[fileID], _extends({}, updatedFileData));
      updatedFiles[fileID] = updatedFile;

      _this4.core.generatePreview(updatedFile);
    });
    this.core.setState({
      files: updatedFiles
    });
    this.core.emit('core:restored');
  };

  RestoreFiles.prototype.install = function install() {
    var _this5 = this;

    this.loadFilesStateFromLocalStorage();

    if (Object.keys(this.core.state.files).length > 0) {
      if (this.ServiceWorkerStore) {
        this.core.log('Attempting to load files from Service Worker...');
        this.loadFileBlobsFromServiceWorker();
      } else {
        this.core.log('Attempting to load files from Indexed DB...');
        this.loadFileBlobsFromIndexedDB();
      }
    }

    this.core.on('core:file-added', function (file) {
      if (file.isRemote) return;

      if (_this5.ServiceWorkerStore) {
        _this5.ServiceWorkerStore.put(file).catch(function (err) {
          _this5.core.log('Could not store file', 'error');
          _this5.core.log(err);
        });
      }

      _this5.IndexedDBStore.put(file).catch(function (err) {
        _this5.core.log('Could not store file', 'error');
        _this5.core.log(err);
      });
    });

    this.core.on('core:file-removed', function (fileID) {
      if (_this5.ServiceWorkerStore) _this5.ServiceWorkerStore.delete(fileID);
      _this5.IndexedDBStore.delete(fileID);
    });

    this.core.on('core:state-update', this.saveFilesStateToLocalStorage);

    this.core.on('core:restored', function () {
      // start all uploads again when file blobs are restored
      var _core$getState = _this5.core.getState(),
          currentUploads = _core$getState.currentUploads;

      if (currentUploads) {
        Object.keys(currentUploads).forEach(function (uploadId) {
          _this5.core.restore(uploadId, currentUploads[uploadId]);
        });
      }
    });
  };

  return RestoreFiles;
}(Plugin);
//# sourceMappingURL=index.js.map