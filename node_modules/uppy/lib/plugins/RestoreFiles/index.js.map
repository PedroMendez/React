{"version":3,"sources":["../../../src/plugins/RestoreFiles/index.js"],"names":["Plugin","require","ServiceWorkerStore","IndexedDBStore","module","exports","core","opts","type","id","title","defaultOptions","serviceWorker","saveFilesStateToLocalStorage","bind","loadFilesStateFromLocalStorage","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","onBlobsLoaded","savedState","localStorage","getItem","log","setState","JSON","parse","files","stringify","currentUploads","state","setItem","list","then","blobs","console","numberOfFilesRecovered","Object","keys","length","numberOfFilesTryingToRecover","info","updatedFiles","forEach","fileID","cachedData","data","updatedFileData","isRestored","updatedFile","generatePreview","emit","install","on","file","isRemote","put","catch","err","delete","getState","uploadId","restore"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAASC,QAAQ,WAAR,CAAf;AACA,IAAMC,qBAAqBD,QAAQ,sBAAR,CAA3B;AACA,IAAME,iBAAiBF,QAAQ;;AAE/B;;;;;;;;AAFuB,CAAvB,CAUAG,OAAOC,OAAP;AAAA;;AACE,wBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA,iDACvB,mBAAMD,IAAN,EAAYC,IAAZ,CADuB;;AAEvB,UAAKC,IAAL,GAAY,UAAZ;AACA,UAAKC,EAAL,GAAU,cAAV;AACA,UAAKC,KAAL,GAAa,eAAb;;AAEA;AACA,QAAMC,iBAAiB;AACrBC,qBAAe;;AAGjB;AAJuB,KAAvB,CAKA,MAAKL,IAAL,GAAY,SAAc,EAAd,EAAkBI,cAAlB,EAAkCJ;;AAE9C;AAFY,KAAZ,CAGA,MAAKL,kBAAL,GAA0B,MAAKK,IAAL,CAAUK,aAAV,GAA0B,IAAIV,kBAAJ,CAAuBI,IAAvB,CAA1B,GAAyD,KAAnF;AACA,UAAKH,cAAL,GAAsB,IAAIA,cAAJ,CAAmBG,IAAnB,CAAtB;;AAEA,UAAKO,4BAAL,GAAoC,MAAKA,4BAAL,CAAkCC,IAAlC,OAApC;AACA,UAAKC,8BAAL,GAAsC,MAAKA,8BAAL,CAAoCD,IAApC,OAAtC;AACA,UAAKE,8BAAL,GAAsC,MAAKA,8BAAL,CAAoCF,IAApC,OAAtC;AACA,UAAKG,0BAAL,GAAkC,MAAKA,0BAAL,CAAgCH,IAAhC,OAAlC;AACA,UAAKI,aAAL,GAAqB,MAAKA,aAAL,CAAmBJ,IAAnB,OAArB;AAtBuB;AAuBxB;;AAxBH,yBA0BEC,8BA1BF,6CA0BoC;AAChC,QAAMI,aAAaC,aAAaC,OAAb,CAAqB,WAArB,CAAnB;;AAEA,QAAIF,UAAJ,EAAgB;AACd,WAAKb,IAAL,CAAUgB,GAAV,CAAc,yCAAd;AACA,WAAKhB,IAAL,CAAUiB,QAAV,CAAmBC,KAAKC,KAAL,CAAWN,UAAX,CAAnB;AACD;AACF,GAjCH;;AAAA,yBAmCEN,4BAnCF,2CAmCkC;AAC9B,QAAMa,QAAQF,KAAKG,SAAL,CAAe;AAC3BC,sBAAgB,KAAKtB,IAAL,CAAUuB,KAAV,CAAgBD,cADL;AAE3BF,aAAO,KAAKpB,IAAL,CAAUuB,KAAV,CAAgBH;AAFI,KAAf,CAAd;AAIAN,iBAAaU,OAAb,CAAqB,WAArB,EAAkCJ,KAAlC;AACD,GAzCH;;AAAA,yBA2CEV,8BA3CF,6CA2CoC;AAAA;;AAChC,SAAKd,kBAAL,CAAwB6B,IAAxB,GAA+BC,IAA/B,CAAoC,UAACC,KAAD,EAAW;AAC7CC,cAAQZ,GAAR,CAAYW,KAAZ;AACA,UAAME,yBAAyBC,OAAOC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAlD;AACA,UAAMC,+BAA+BH,OAAOC,IAAP,CAAY,OAAK/B,IAAL,CAAUuB,KAAV,CAAgBH,KAA5B,EAAmCY,MAAxE;AACA,UAAIH,2BAA2BI,4BAA/B,EAA6D;AAC3D,eAAKjC,IAAL,CAAUgB,GAAV,6BAAwCa,sBAAxC;AACA,eAAK7B,IAAL,CAAUkC,IAAV,6BAAyCL,sBAAzC,aAAyE,SAAzE,EAAoF,IAApF;AACA,eAAKjB,aAAL,CAAmBe,KAAnB;AACD,OAJD,MAIO;AACL,eAAK3B,IAAL,CAAUgB,GAAV,CAAc,sEAAd;AACA,eAAKL,0BAAL;AACD;AACF,KAZD;AAaD,GAzDH;;AAAA,yBA2DEA,0BA3DF,yCA2DgC;AAAA;;AAC5B,SAAKd,cAAL,CAAoB4B,IAApB,GAA2BC,IAA3B,CAAgC,UAACC,KAAD,EAAW;AACzC,UAAME,yBAAyBC,OAAOC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAlD;AACA,UAAIH,yBAAyB,CAA7B,EAAgC;AAC9B,eAAK7B,IAAL,CAAUgB,GAAV,6BAAwCa,sBAAxC;AACA,eAAK7B,IAAL,CAAUkC,IAAV,6BAAyCL,sBAAzC,aAAyE,SAAzE,EAAoF,IAApF;AACA,eAAO,OAAKjB,aAAL,CAAmBe,KAAnB,CAAP;AACD;AACD,aAAK3B,IAAL,CAAUgB,GAAV,CAAc,6CAAd;AACD,KARD;AASD,GArEH;;AAAA,yBAuEEJ,aAvEF,0BAuEiBe,KAvEjB,EAuEwB;AAAA;;AACpB,QAAMQ,eAAe,SAAc,EAAd,EAAkB,KAAKnC,IAAL,CAAUuB,KAAV,CAAgBH,KAAlC,CAArB;AACAU,WAAOC,IAAP,CAAYJ,KAAZ,EAAmBS,OAAnB,CAA2B,UAACC,MAAD,EAAY;AACrC,UAAMC,aAAaX,MAAMU,MAAN,EAAcE,IAAjC;;AAEA,UAAMC,kBAAkB;AACtBD,cAAMD,UADgB;AAEtBG,oBAAY;AAFU,OAAxB;AAIA,UAAMC,cAAc,SAAc,EAAd,EAAkBP,aAAaE,MAAb,CAAlB,EAClB,SAAc,EAAd,EAAkBG,eAAlB,CADkB,CAApB;AAGAL,mBAAaE,MAAb,IAAuBK,WAAvB;;AAEA,aAAK1C,IAAL,CAAU2C,eAAV,CAA0BD,WAA1B;AACD,KAbD;AAcA,SAAK1C,IAAL,CAAUiB,QAAV,CAAmB;AACjBG,aAAOe;AADU,KAAnB;AAGA,SAAKnC,IAAL,CAAU4C,IAAV,CAAe,eAAf;AACD,GA3FH;;AAAA,yBA6FEC,OA7FF,sBA6Fa;AAAA;;AACT,SAAKpC,8BAAL;;AAEA,QAAIqB,OAAOC,IAAP,CAAY,KAAK/B,IAAL,CAAUuB,KAAV,CAAgBH,KAA5B,EAAmCY,MAAnC,GAA4C,CAAhD,EAAmD;AACjD,UAAI,KAAKpC,kBAAT,EAA6B;AAC3B,aAAKI,IAAL,CAAUgB,GAAV,CAAc,iDAAd;AACA,aAAKN,8BAAL;AACD,OAHD,MAGO;AACL,aAAKV,IAAL,CAAUgB,GAAV,CAAc,6CAAd;AACA,aAAKL,0BAAL;AACD;AACF;;AAED,SAAKX,IAAL,CAAU8C,EAAV,CAAa,iBAAb,EAAgC,UAACC,IAAD,EAAU;AACxC,UAAIA,KAAKC,QAAT,EAAmB;;AAEnB,UAAI,OAAKpD,kBAAT,EAA6B;AAC3B,eAAKA,kBAAL,CAAwBqD,GAAxB,CAA4BF,IAA5B,EAAkCG,KAAlC,CAAwC,UAACC,GAAD,EAAS;AAC/C,iBAAKnD,IAAL,CAAUgB,GAAV,CAAc,sBAAd,EAAsC,OAAtC;AACA,iBAAKhB,IAAL,CAAUgB,GAAV,CAAcmC,GAAd;AACD,SAHD;AAID;;AAED,aAAKtD,cAAL,CAAoBoD,GAApB,CAAwBF,IAAxB,EAA8BG,KAA9B,CAAoC,UAACC,GAAD,EAAS;AAC3C,eAAKnD,IAAL,CAAUgB,GAAV,CAAc,sBAAd,EAAsC,OAAtC;AACA,eAAKhB,IAAL,CAAUgB,GAAV,CAAcmC,GAAd;AACD,OAHD;AAID,KAdD;;AAgBA,SAAKnD,IAAL,CAAU8C,EAAV,CAAa,mBAAb,EAAkC,UAACT,MAAD,EAAY;AAC5C,UAAI,OAAKzC,kBAAT,EAA6B,OAAKA,kBAAL,CAAwBwD,MAAxB,CAA+Bf,MAA/B;AAC7B,aAAKxC,cAAL,CAAoBuD,MAApB,CAA2Bf,MAA3B;AACD,KAHD;;AAKA,SAAKrC,IAAL,CAAU8C,EAAV,CAAa,mBAAb,EAAkC,KAAKvC,4BAAvC;;AAEA,SAAKP,IAAL,CAAU8C,EAAV,CAAa,eAAb,EAA8B,YAAM;AAClC;AADkC,2BAEP,OAAK9C,IAAL,CAAUqD,QAAV,EAFO;AAAA,UAE1B/B,cAF0B,kBAE1BA,cAF0B;;AAGlC,UAAIA,cAAJ,EAAoB;AAClBQ,eAAOC,IAAP,CAAYT,cAAZ,EAA4Bc,OAA5B,CAAoC,UAACkB,QAAD,EAAc;AAChD,iBAAKtD,IAAL,CAAUuD,OAAV,CAAkBD,QAAlB,EAA4BhC,eAAegC,QAAf,CAA5B;AACD,SAFD;AAGD;AACF,KARD;AASD,GA1IH;;AAAA;AAAA,EAA4C5D,MAA5C","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\nconst ServiceWorkerStore = require('./ServiceWorkerStore')\nconst IndexedDBStore = require('./IndexedDBStore')\n\n/**\n * Persistent State\n *\n * Helps debug Uppy: loads saved state from localStorage, so when you restart the page,\n * your state is right where you left off. If something goes wrong, clear uppyState\n * in your localStorage, using the devTools\n *\n */\nmodule.exports = class RestoreFiles extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'debugger'\n    this.id = 'RestoreFiles'\n    this.title = 'Restore Files'\n\n    // set default options\n    const defaultOptions = {\n      serviceWorker: false\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    // const Store = this.opts.serviceWorker ? ServiceWorkerStore : IndexedDBStore\n    this.ServiceWorkerStore = this.opts.serviceWorker ? new ServiceWorkerStore(core) : false\n    this.IndexedDBStore = new IndexedDBStore(core)\n\n    this.saveFilesStateToLocalStorage = this.saveFilesStateToLocalStorage.bind(this)\n    this.loadFilesStateFromLocalStorage = this.loadFilesStateFromLocalStorage.bind(this)\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  loadFilesStateFromLocalStorage () {\n    const savedState = localStorage.getItem('uppyState')\n\n    if (savedState) {\n      this.core.log('Recovered some state from Local Storage')\n      this.core.setState(JSON.parse(savedState))\n    }\n  }\n\n  saveFilesStateToLocalStorage () {\n    const files = JSON.stringify({\n      currentUploads: this.core.state.currentUploads,\n      files: this.core.state.files\n    })\n    localStorage.setItem('uppyState', files)\n  }\n\n  loadFileBlobsFromServiceWorker () {\n    this.ServiceWorkerStore.list().then((blobs) => {\n      console.log(blobs)\n      const numberOfFilesRecovered = Object.keys(blobs).length\n      const numberOfFilesTryingToRecover = Object.keys(this.core.state.files).length\n      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {\n        this.core.log(`Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\n        this.core.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\n        this.onBlobsLoaded(blobs)\n      } else {\n        this.core.log('Failed to recover blobs from Service Worker, trying IndexedDB now...')\n        this.loadFileBlobsFromIndexedDB()\n      }\n    })\n  }\n\n  loadFileBlobsFromIndexedDB () {\n    this.IndexedDBStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n      if (numberOfFilesRecovered > 0) {\n        this.core.log(`Successfully recovered ${numberOfFilesRecovered} blobs from Indexed DB!`)\n        this.core.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\n        return this.onBlobsLoaded(blobs)\n      }\n      this.core.log('Couldnâ€™t recover anything from IndexedDB :(')\n    })\n  }\n\n  onBlobsLoaded (blobs) {\n    const updatedFiles = Object.assign({}, this.core.state.files)\n    Object.keys(blobs).forEach((fileID) => {\n      const cachedData = blobs[fileID].data\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true\n      }\n      const updatedFile = Object.assign({}, updatedFiles[fileID],\n        Object.assign({}, updatedFileData)\n      )\n      updatedFiles[fileID] = updatedFile\n\n      this.core.generatePreview(updatedFile)\n    })\n    this.core.setState({\n      files: updatedFiles\n    })\n    this.core.emit('core:restored')\n  }\n\n  install () {\n    this.loadFilesStateFromLocalStorage()\n\n    if (Object.keys(this.core.state.files).length > 0) {\n      if (this.ServiceWorkerStore) {\n        this.core.log('Attempting to load files from Service Worker...')\n        this.loadFileBlobsFromServiceWorker()\n      } else {\n        this.core.log('Attempting to load files from Indexed DB...')\n        this.loadFileBlobsFromIndexedDB()\n      }\n    }\n\n    this.core.on('core:file-added', (file) => {\n      if (file.isRemote) return\n\n      if (this.ServiceWorkerStore) {\n        this.ServiceWorkerStore.put(file).catch((err) => {\n          this.core.log('Could not store file', 'error')\n          this.core.log(err)\n        })\n      }\n\n      this.IndexedDBStore.put(file).catch((err) => {\n        this.core.log('Could not store file', 'error')\n        this.core.log(err)\n      })\n    })\n\n    this.core.on('core:file-removed', (fileID) => {\n      if (this.ServiceWorkerStore) this.ServiceWorkerStore.delete(fileID)\n      this.IndexedDBStore.delete(fileID)\n    })\n\n    this.core.on('core:state-update', this.saveFilesStateToLocalStorage)\n\n    this.core.on('core:restored', () => {\n      // start all uploads again when file blobs are restored\n      const { currentUploads } = this.core.getState()\n      if (currentUploads) {\n        Object.keys(currentUploads).forEach((uploadId) => {\n          this.core.restore(uploadId, currentUploads[uploadId])\n        })\n      }\n    })\n  }\n}\n"]}