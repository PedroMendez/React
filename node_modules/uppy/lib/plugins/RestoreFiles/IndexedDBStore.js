'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;

var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;

var isSupported = !!indexedDB;

var DB_NAME = 'uppy-blobs';
var DB_VERSION = 1;

function connect(dbName, name) {
  var request = indexedDB.open(dbName, DB_VERSION);
  return new _Promise(function (resolve, reject) {
    request.onupgradeneeded = function (event) {
      var db = event.target.result;
      var store = db.createObjectStore(name, { keyPath: 'id' });
      store.transaction.oncomplete = function () {
        resolve(db);
      };
    };
    request.onsuccess = function (event) {
      resolve(event.target.result);
    };
    request.onerror = reject;
  });
}

function waitForRequest(request) {
  return new _Promise(function (resolve, reject) {
    request.onsuccess = function (event) {
      resolve(event.target.result);
    };
    request.onerror = reject;
  });
}

var IndexedDBStore = function () {
  function IndexedDBStore(core, opts) {
    _classCallCheck(this, IndexedDBStore);

    this.opts = _extends({
      dbName: DB_NAME,
      storeName: 'default',
      maxFileSize: 10 * 1024 * 1024, // 10 MB
      maxTotalSize: 300 * 1024 * 1024 // 300 MB
    }, opts);

    this.name = this.opts.storeName;
    this.ready = connect(this.opts.dbName, this.opts.storeName);
  }

  /**
   * List all file blobs currently in the store.
   */


  IndexedDBStore.prototype.list = function list() {
    var _this = this;

    return this.ready.then(function (db) {
      var transaction = db.transaction([_this.name], 'readonly');
      var request = transaction.objectStore(_this.name).getAll();
      return waitForRequest(request);
    }).then(function (files) {
      var result = {};
      files.forEach(function (file) {
        result[file.id] = file;
      });
      return result;
    });
  };

  /**
   * Get one file blob from the store.
   */


  IndexedDBStore.prototype.get = function get(fileID) {
    var _this2 = this;

    return this.ready.then(function (db) {
      var transaction = db.transaction([_this2.name], 'readonly');
      var request = transaction.objectStore(_this2.name).get(fileID);
      return waitForRequest(request);
    }).then(function (result) {
      return result.data;
    });
  };

  /**
   * Get the total size of all stored files.
   *
   * @private
   */


  IndexedDBStore.prototype.getSize = function getSize() {
    var _this3 = this;

    return this.ready.then(function (db) {
      var transaction = db.transaction([_this3.name], 'readonly');
      var request = transaction.objectStore(_this3.name).openCursor();
      return new _Promise(function (resolve, reject) {
        var size = 0;
        request.onsuccess = function (event) {
          var cursor = event.target.result;
          if (cursor) {
            size += cursor.value.data.size;
            cursor.continue();
          } else {
            resolve(size);
          }
        };
        request.onerror = function () {
          reject(new Error('Could not retrieve stored blobs size'));
        };
      });
    });
  };

  /**
   * Save a file in the store.
   */


  IndexedDBStore.prototype.put = function put(file) {
    var _this4 = this;

    if (file.data.size > this.opts.maxFileSize) {
      return Promise.reject(new Error('File is too big to store.'));
    }
    return this.getSize().then(function (size) {
      if (size > _this4.opts.maxTotalSize) {
        return Promise.reject(new Error('No space left'));
      }
      return _this4.ready;
    }).then(function (db) {
      var transaction = db.transaction([_this4.name], 'readwrite');
      var request = transaction.objectStore(_this4.name).add({
        id: file.id,
        data: file.data
      });
      return waitForRequest(request);
    });
  };

  /**
   * Delete a file blob from the store.
   */


  IndexedDBStore.prototype.delete = function _delete(fileID) {
    var _this5 = this;

    return this.ready.then(function (db) {
      var transaction = db.transaction([_this5.name], 'readwrite');
      var request = transaction.objectStore(_this5.name).delete(fileID);
      return waitForRequest(request);
    });
  };

  return IndexedDBStore;
}();

IndexedDBStore.isSupported = isSupported;

module.exports = IndexedDBStore;
//# sourceMappingURL=IndexedDBStore.js.map