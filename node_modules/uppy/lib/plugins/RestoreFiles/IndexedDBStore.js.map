{"version":3,"sources":["../../../src/plugins/RestoreFiles/IndexedDBStore.js"],"names":["indexedDB","window","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","isSupported","DB_NAME","DB_VERSION","connect","dbName","name","request","open","resolve","reject","onupgradeneeded","event","db","target","result","store","createObjectStore","keyPath","transaction","oncomplete","onsuccess","onerror","waitForRequest","IndexedDBStore","core","opts","storeName","maxFileSize","maxTotalSize","ready","list","then","objectStore","getAll","files","forEach","file","id","get","fileID","data","getSize","openCursor","size","cursor","value","continue","Error","put","Promise","add","delete","module","exports"],"mappings":"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","file":"IndexedDBStore.js","sourcesContent":["const indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB\n\nconst isSupported = !!indexedDB\n\nconst DB_NAME = 'uppy-blobs'\nconst DB_VERSION = 1\n\nfunction connect (dbName, name) {\n  const request = indexedDB.open(dbName, DB_VERSION)\n  return new Promise((resolve, reject) => {\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result\n      const store = db.createObjectStore(name, { keyPath: 'id' })\n      store.transaction.oncomplete = () => {\n        resolve(db)\n      }\n    }\n    request.onsuccess = (event) => {\n      resolve(event.target.result)\n    }\n    request.onerror = reject\n  })\n}\n\nfunction waitForRequest (request) {\n  return new Promise((resolve, reject) => {\n    request.onsuccess = (event) => {\n      resolve(event.target.result)\n    }\n    request.onerror = reject\n  })\n}\n\nclass IndexedDBStore {\n  constructor (core, opts) {\n    this.opts = Object.assign({\n      dbName: DB_NAME,\n      storeName: 'default',\n      maxFileSize: 10 * 1024 * 1024, // 10 MB\n      maxTotalSize: 300 * 1024 * 1024 // 300 MB\n    }, opts)\n\n    this.name = this.opts.storeName\n    this.ready = connect(this.opts.dbName, this.opts.storeName)\n  }\n\n  /**\n   * List all file blobs currently in the store.\n   */\n  list () {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([this.name], 'readonly')\n      const request = transaction.objectStore(this.name).getAll()\n      return waitForRequest(request)\n    }).then((files) => {\n      const result = {}\n      files.forEach((file) => {\n        result[file.id] = file\n      })\n      return result\n    })\n  }\n\n  /**\n   * Get one file blob from the store.\n   */\n  get (fileID) {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([this.name], 'readonly')\n      const request = transaction.objectStore(this.name).get(fileID)\n      return waitForRequest(request)\n    }).then((result) => result.data)\n  }\n\n  /**\n   * Get the total size of all stored files.\n   *\n   * @private\n   */\n  getSize () {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([this.name], 'readonly')\n      const request = transaction.objectStore(this.name).openCursor()\n      return new Promise((resolve, reject) => {\n        let size = 0\n        request.onsuccess = (event) => {\n          const cursor = event.target.result\n          if (cursor) {\n            size += cursor.value.data.size\n            cursor.continue()\n          } else {\n            resolve(size)\n          }\n        }\n        request.onerror = () => {\n          reject(new Error('Could not retrieve stored blobs size'))\n        }\n      })\n    })\n  }\n\n  /**\n   * Save a file in the store.\n   */\n  put (file) {\n    if (file.data.size > this.opts.maxFileSize) {\n      return Promise.reject(new Error('File is too big to store.'))\n    }\n    return this.getSize().then((size) => {\n      if (size > this.opts.maxTotalSize) {\n        return Promise.reject(new Error('No space left'))\n      }\n      return this.ready\n    }).then((db) => {\n      const transaction = db.transaction([this.name], 'readwrite')\n      const request = transaction.objectStore(this.name).add({\n        id: file.id,\n        data: file.data\n      })\n      return waitForRequest(request)\n    })\n  }\n\n  /**\n   * Delete a file blob from the store.\n   */\n  delete (fileID) {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([this.name], 'readwrite')\n      const request = transaction.objectStore(this.name).delete(fileID)\n      return waitForRequest(request)\n    })\n  }\n}\n\nIndexedDBStore.isSupported = isSupported\n\nmodule.exports = IndexedDBStore\n"]}