{"version":3,"sources":["../../../src/plugins/Transloadit/index.js"],"names":["Plugin","require","Client","StatusSocket","module","exports","core","opts","type","id","title","defaultLocale","strings","creatingAssembly","creatingAssemblyFailed","encoding","defaultOptions","waitForEncoding","waitForMetadata","alwaysRunAssembly","importFromUploadURLs","signature","params","fields","getAssemblyOptions","file","options","locale","prepareUpload","bind","afterUpload","onFileUploadURLAvailable","validateParams","client","sockets","Error","JSON","parse","err","message","auth","key","fileIDs","Promise","all","map","fileID","getFile","promise","resolve","then","assemblyOptions","dedupeAssemblyOptions","list","dedupeMap","Object","create","forEach","stringify","push","keys","createAssembly","uploadID","pluginOptions","log","expectedFiles","length","assembly","assemblyList","state","uploadsAssemblies","concat","assembly_id","updateState","assemblies","attachAssemblyMetadata","tlMeta","assembly_url","filename","name","fieldname","meta","tus","endpoint","tus_url","metaFields","transloadit","newFile","files","setState","emit","connectSocket","catch","info","shouldWait","reserveFiles","reserveFile","addFile","findFile","uploadedFile","hasOwnProperty","uploadURL","tus_upload_url","onFileUploadComplete","assemblyId","getAssembly","onResult","stepName","result","original_id","localId","results","onAssemblyFinished","url","getAssemblyStatus","socket","websocket_url","on","error","assembly_ssl_url","reject","mode","optionsPromise","allOptions","assemblyIDs","assemblyID","close","finishedAssemblies","indexOf","getAssemblyFiles","removeListeners","onAssemblyError","onImportError","off","install","addPreProcessor","addPostProcessor","uninstall","removePreProcessor","removePostProcessor","filter","newState"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\nconst Client = require('./Client')\nconst StatusSocket = require('./Socket')\n\n/**\n * Upload files to Transloadit using Tus.\n */\nmodule.exports = class Transloadit extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'Transloadit'\n    this.title = 'Transloadit'\n\n    const defaultLocale = {\n      strings: {\n        creatingAssembly: 'Preparing upload...',\n        creatingAssemblyFailed: 'Transloadit: Could not create assembly',\n        encoding: 'Encoding...'\n      }\n    }\n\n    const defaultOptions = {\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false, // TODO name\n      importFromUploadURLs: false,\n      signature: null,\n      params: null,\n      fields: {},\n      getAssemblyOptions (file, options) {\n        return {\n          params: options.params,\n          signature: options.signature,\n          fields: options.fields\n        }\n      },\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n    this.afterUpload = this.afterUpload.bind(this)\n    this.onFileUploadURLAvailable = this.onFileUploadURLAvailable.bind(this)\n\n    if (this.opts.params) {\n      this.validateParams(this.opts.params)\n    }\n\n    this.client = new Client()\n    this.sockets = {}\n  }\n\n  validateParams (params) {\n    if (!params) {\n      throw new Error('Transloadit: The `params` option is required.')\n    }\n\n    if (typeof params === 'string') {\n      try {\n        params = JSON.parse(params)\n      } catch (err) {\n        // Tell the user that this is not an Uppy bug!\n        err.message = 'Transloadit: The `params` option is a malformed JSON string: ' +\n          err.message\n        throw err\n      }\n    }\n\n    if (!params.auth || !params.auth.key) {\n      throw new Error('Transloadit: The `params.auth.key` option is required. ' +\n        'You can find your Transloadit API key at https://transloadit.com/accounts/credentials.')\n    }\n  }\n\n  getAssemblyOptions (fileIDs) {\n    const options = this.opts\n    return Promise.all(\n      fileIDs.map((fileID) => {\n        const file = this.core.getFile(fileID)\n        const promise = Promise.resolve(options.getAssemblyOptions(file, options))\n        return promise.then((assemblyOptions) => {\n          this.validateParams(assemblyOptions.params)\n\n          return {\n            fileIDs: [fileID],\n            options: assemblyOptions\n          }\n        })\n      })\n    )\n  }\n\n  dedupeAssemblyOptions (list) {\n    const dedupeMap = Object.create(null)\n    list.forEach(({ fileIDs, options }) => {\n      const id = JSON.stringify(options)\n      if (dedupeMap[id]) {\n        dedupeMap[id].fileIDs.push(...fileIDs)\n      } else {\n        dedupeMap[id] = {\n          options,\n          fileIDs: [...fileIDs]\n        }\n      }\n    })\n\n    return Object.keys(dedupeMap).map((id) => dedupeMap[id])\n  }\n\n  createAssembly (fileIDs, uploadID, options) {\n    const pluginOptions = this.opts\n\n    this.core.log('Transloadit: create assembly')\n\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature\n    }).then((assembly) => {\n      // Store the list of assemblies related to this upload.\n      const assemblyList = this.state.uploadsAssemblies[uploadID]\n      const uploadsAssemblies = Object.assign({}, this.state.uploadsAssemblies, {\n        [uploadID]: assemblyList.concat([ assembly.assembly_id ])\n      })\n\n      this.updateState({\n        assemblies: Object.assign(this.state.assemblies, {\n          [assembly.assembly_id]: assembly\n        }),\n        uploadsAssemblies\n      })\n\n      function attachAssemblyMetadata (file, assembly) {\n        // Attach meta parameters for the Tus plugin. See:\n        // https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n        // TODO Should this `meta` be moved to a `tus.meta` property instead?\n        const tlMeta = {\n          assembly_url: assembly.assembly_url,\n          filename: file.name,\n          fieldname: 'file'\n        }\n        const meta = Object.assign({}, file.meta, tlMeta)\n        // Add assembly-specific Tus endpoint.\n        const tus = Object.assign({}, file.tus, {\n          endpoint: assembly.tus_url,\n          // Only send assembly metadata to the tus endpoint.\n          metaFields: Object.keys(tlMeta)\n        })\n        const transloadit = {\n          assembly: assembly.assembly_id\n        }\n\n        const newFile = Object.assign({}, file, { transloadit })\n        // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n        if (!pluginOptions.importFromUploadURLs) {\n          Object.assign(newFile, { meta, tus })\n        }\n        return newFile\n      }\n\n      const files = Object.assign({}, this.core.state.files)\n      fileIDs.forEach((id) => {\n        files[id] = attachAssemblyMetadata(files[id], assembly)\n      })\n\n      this.core.setState({ files })\n\n      this.core.emit('transloadit:assembly-created', assembly, fileIDs)\n\n      return this.connectSocket(assembly)\n        .then(() => assembly)\n    }).then((assembly) => {\n      this.core.log('Transloadit: Created assembly')\n      return assembly\n    }).catch((err) => {\n      this.core.info(pluginOptions.locale.strings.creatingAssemblyFailed, 'error', 0)\n\n      // Reject the promise.\n      throw err\n    })\n  }\n\n  shouldWait () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the assembly.\n   */\n  reserveFiles (assembly, fileIDs) {\n    return Promise.all(fileIDs.map((fileID) => {\n      const file = this.core.getFile(fileID)\n      return this.client.reserveFile(assembly, file)\n    }))\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the assembly\n   * once they have been fully uploaded.\n   */\n  onFileUploadURLAvailable (fileID) {\n    const file = this.core.getFile(fileID)\n    if (!file || !file.transloadit || !file.transloadit.assembly) {\n      return\n    }\n\n    const assembly = this.state.assemblies[file.transloadit.assembly]\n\n    this.client.addFile(assembly, file).catch((err) => {\n      this.core.log(err)\n      this.core.emit('transloadit:import-error', assembly, file.id, err)\n    })\n  }\n\n  findFile (uploadedFile) {\n    const files = this.core.state.files\n    for (const id in files) {\n      if (!files.hasOwnProperty(id)) {\n        continue\n      }\n      if (files[id].uploadURL === uploadedFile.tus_upload_url) {\n        return files[id]\n      }\n    }\n  }\n\n  onFileUploadComplete (assemblyId, uploadedFile) {\n    const file = this.findFile(uploadedFile)\n    this.updateState({\n      files: Object.assign({}, this.state.files, {\n        [uploadedFile.id]: {\n          id: file.id,\n          uploadedFile\n        }\n      })\n    })\n    this.core.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId))\n  }\n\n  onResult (assemblyId, stepName, result) {\n    const file = this.state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null\n\n    this.updateState({\n      results: this.state.results.concat(result)\n    })\n    this.core.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId))\n  }\n\n  onAssemblyFinished (url) {\n    this.client.getAssemblyStatus(url).then((assembly) => {\n      this.updateState({\n        assemblies: Object.assign({}, this.state.assemblies, {\n          [assembly.assembly_id]: assembly\n        })\n      })\n      this.core.emit('transloadit:complete', assembly)\n    })\n  }\n\n  connectSocket (assembly) {\n    const socket = new StatusSocket(\n      assembly.websocket_url,\n      assembly\n    )\n    this.sockets[assembly.assembly_id] = socket\n\n    socket.on('upload', this.onFileUploadComplete.bind(this, assembly.assembly_id))\n    socket.on('error', (error) => {\n      this.core.emit('transloadit:assembly-error', assembly, error)\n    })\n\n    if (this.opts.waitForEncoding) {\n      socket.on('result', this.onResult.bind(this, assembly.assembly_id))\n    }\n\n    if (this.opts.waitForEncoding) {\n      socket.on('finished', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n      })\n    } else if (this.opts.waitForMetadata) {\n      socket.on('metadata', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n        this.core.emit('transloadit:complete', assembly)\n      })\n    }\n\n    return new Promise((resolve, reject) => {\n      socket.on('connect', resolve)\n      socket.on('error', reject)\n    }).then(() => {\n      this.core.log('Transloadit: Socket is ready')\n    })\n  }\n\n  prepareUpload (fileIDs, uploadID) {\n    fileIDs.forEach((fileID) => {\n      this.core.emit('core:preprocess-progress', fileID, {\n        mode: 'indeterminate',\n        message: this.opts.locale.strings.creatingAssembly\n      })\n    })\n\n    const createAssembly = ({ fileIDs, options }) => {\n      return this.createAssembly(fileIDs, uploadID, options).then((assembly) => {\n        if (this.opts.importFromUploadURLs) {\n          return this.reserveFiles(assembly, fileIDs)\n        }\n      }).then(() => {\n        fileIDs.forEach((fileID) => {\n          this.core.emit('core:preprocess-complete', fileID)\n        })\n      })\n    }\n\n    const uploadsAssemblies = Object.assign({},\n      this.state.uploadsAssemblies,\n      { [uploadID]: [] })\n    this.updateState({ uploadsAssemblies })\n\n    let optionsPromise\n    if (fileIDs.length > 0) {\n      optionsPromise = this.getAssemblyOptions(fileIDs)\n        .then((allOptions) => this.dedupeAssemblyOptions(allOptions))\n    } else if (this.opts.alwaysRunAssembly) {\n      optionsPromise = Promise.resolve(\n        this.opts.getAssemblyOptions(null, this.opts)\n      ).then((options) => {\n        this.validateParams(options.params)\n        return [\n          { fileIDs, options }\n        ]\n      })\n    } else {\n      // If there are no files and we do not `alwaysRunAssembly`,\n      // don't do anything.\n      return Promise.resolve()\n    }\n\n    return optionsPromise.then((assemblies) => Promise.all(\n      assemblies.map(createAssembly)\n    ))\n  }\n\n  afterUpload (fileIDs, uploadID) {\n    const assemblyIDs = this.state.uploadsAssemblies[uploadID]\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.shouldWait()) {\n      assemblyIDs.forEach((assemblyID) => {\n        const socket = this.sockets[assemblyID]\n        socket.close()\n      })\n      return Promise.resolve()\n    }\n\n    // If no assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n    if (assemblyIDs.length === 0) {\n      return Promise.resolve()\n    }\n\n    let finishedAssemblies = 0\n\n    return new Promise((resolve, reject) => {\n      fileIDs.forEach((fileID) => {\n        this.core.emit('core:postprocess-progress', fileID, {\n          mode: 'indeterminate',\n          message: this.opts.locale.strings.encoding\n        })\n      })\n\n      const onAssemblyFinished = (assembly) => {\n        // An assembly for a different upload just finished. We can ignore it.\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          return\n        }\n\n        // TODO set the `file.uploadURL` to a result?\n        // We will probably need an option here so the plugin user can tell us\n        // which result to pick…?\n\n        const files = this.getAssemblyFiles(assembly.assembly_id)\n        files.forEach((file) => {\n          this.core.emit('core:postprocess-complete', file.id)\n        })\n\n        finishedAssemblies += 1\n        if (finishedAssemblies === assemblyIDs.length) {\n          // We're done, these listeners can be removed\n          removeListeners()\n          resolve()\n        }\n      }\n\n      const onAssemblyError = (assembly, error) => {\n        // An assembly for a different upload just finished. We can ignore it.\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          return\n        }\n\n        // Clear postprocessing state for all our files.\n        const files = this.getAssemblyFiles(assembly.assembly_id)\n        files.forEach((file) => {\n          this.core.emit('core:postprocess-complete', file.id)\n        })\n\n        // Should we remove the listeners here or should we keep handling finished\n        // assemblies?\n        // Doing this for now so that it's not possible to receive more postprocessing\n        // events once the upload has failed.\n        removeListeners()\n\n        // Reject the `afterUpload()` promise.\n        reject(error)\n      }\n\n      const onImportError = (assembly, fileID, error) => {\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          return\n        }\n\n        // Not sure if we should be doing something when it's just one file failing.\n        // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n        // I think failing the upload is better than silently ignoring.\n        // In the future we should maybe have a way to resolve uploads with some failures,\n        // like returning an object with `{ successful, failed }` uploads.\n        onAssemblyError(assembly, error)\n      }\n\n      const removeListeners = () => {\n        this.core.off('transloadit:complete', onAssemblyFinished)\n        this.core.off('transloadit:assembly-error', onAssemblyError)\n        this.core.off('transloadit:import-error', onImportError)\n      }\n\n      this.core.on('transloadit:complete', onAssemblyFinished)\n      this.core.on('transloadit:assembly-error', onAssemblyError)\n      this.core.on('transloadit:import-error', onImportError)\n    }).then(() => {\n      // Clean up uploadID → assemblyIDs, they're no longer going to be used anywhere.\n      const uploadsAssemblies = Object.assign({}, this.state.uploadsAssemblies)\n      delete uploadsAssemblies[uploadID]\n      this.updateState({ uploadsAssemblies })\n    })\n  }\n\n  install () {\n    this.core.addPreProcessor(this.prepareUpload)\n    this.core.addPostProcessor(this.afterUpload)\n\n    if (this.opts.importFromUploadURLs) {\n      this.core.on('core:upload-success', this.onFileUploadURLAvailable)\n    }\n\n    this.updateState({\n      // Contains assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: []\n    })\n  }\n\n  uninstall () {\n    this.core.removePreProcessor(this.prepareUpload)\n    this.core.removePostProcessor(this.afterUpload)\n\n    if (this.opts.importFromUploadURLs) {\n      this.core.off('core:upload-success', this.onFileUploadURLAvailable)\n    }\n  }\n\n  getAssembly (id) {\n    return this.state.assemblies[id]\n  }\n\n  getAssemblyFiles (assemblyID) {\n    const fileIDs = Object.keys(this.core.state.files)\n    return fileIDs.map((fileID) => {\n      return this.core.getFile(fileID)\n    }).filter((file) => {\n      return file && file.transloadit && file.transloadit.assembly === assemblyID\n    })\n  }\n\n  get state () {\n    return this.core.state.transloadit || {}\n  }\n\n  updateState (newState) {\n    const transloadit = Object.assign({}, this.state, newState)\n\n    this.core.setState({ transloadit })\n  }\n}\n"]}