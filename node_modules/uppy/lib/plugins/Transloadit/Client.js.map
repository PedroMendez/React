{"version":3,"sources":["../../../src/plugins/Transloadit/Client.js"],"names":["module","exports","opts","apiUrl","createAssembly","templateId","params","fields","signature","expectedFiles","data","FormData","append","JSON","stringify","Object","keys","forEach","key","fetch","method","body","then","response","json","assembly","error","Error","message","code","status","reserveFile","file","size","encodeURIComponent","assembly_ssl_url","addFile","uploadURL","Promise","reject","url","filename","name","fieldname","qs","getAssemblyStatus"],"mappings":"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","file":"Client.js","sourcesContent":["/**\n * A Barebones HTTP API client for Transloadit.\n */\nmodule.exports = class Client {\n  constructor (opts = {}) {\n    this.apiUrl = 'https://api2.transloadit.com'\n    this.opts = opts\n  }\n\n  /**\n   * Create a new assembly.\n   *\n   * @param {object} options\n   */\n  createAssembly ({\n    templateId,\n    params,\n    fields,\n    signature,\n    expectedFiles\n  }) {\n    const data = new FormData()\n    data.append('params', typeof params === 'string'\n      ? params\n      : JSON.stringify(params))\n    if (signature) {\n      data.append('signature', signature)\n    }\n\n    Object.keys(fields).forEach((key) => {\n      data.append(key, fields[key])\n    })\n    data.append('num_expected_upload_files', expectedFiles)\n\n    return fetch(`${this.apiUrl}/assemblies`, {\n      method: 'post',\n      body: data\n    }).then((response) => response.json()).then((assembly) => {\n      if (assembly.error) {\n        const error = new Error(assembly.message)\n        error.code = assembly.error\n        error.status = assembly\n        throw error\n      }\n\n      return assembly\n    })\n  }\n\n  reserveFile (assembly, file) {\n    const size = encodeURIComponent(file.size)\n    return fetch(`${assembly.assembly_ssl_url}/reserve_file?size=${size}`, { method: 'post' })\n      .then((response) => response.json())\n  }\n\n  addFile (assembly, file) {\n    if (!file.uploadURL) {\n      return Promise.reject(new Error('File does not have an `uploadURL`.'))\n    }\n    const size = encodeURIComponent(file.size)\n    const url = encodeURIComponent(file.uploadURL)\n    const filename = encodeURIComponent(file.name)\n    const fieldname = 'file'\n\n    const qs = `size=${size}&filename=${filename}&fieldname=${fieldname}&s3Url=${url}`\n    return fetch(`${assembly.assembly_ssl_url}/add_file?${qs}`, { method: 'post' })\n      .then((response) => response.json())\n  }\n\n  /**\n   * Get the current status for an assembly.\n   *\n   * @param {string} url The status endpoint of the assembly.\n   */\n  getAssemblyStatus (url) {\n    return fetch(url)\n      .then((response) => response.json())\n  }\n}\n"]}