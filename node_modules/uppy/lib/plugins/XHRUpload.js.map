{"version":3,"sources":["../../src/plugins/XHRUpload.js"],"names":["Plugin","require","UppySocket","Utils","module","exports","core","opts","type","id","title","defaultOptions","formData","fieldName","method","metaFields","responseUrlFieldName","bundle","headers","getResponseData","xhr","JSON","parse","response","getResponseError","Error","handleUpload","bind","createFormDataUpload","file","formPost","FormData","Array","isArray","Object","keys","meta","forEach","item","append","data","createBareUpload","upload","current","total","state","xhrUpload","log","resolve","reject","XMLHttpRequest","addEventListener","ev","lengthComputable","emit","uploader","bytesUploaded","loaded","bytesTotal","target","status","resp","uploadURL","name","error","request","open","toUpperCase","endpoint","header","setRequestHeader","send","on","fileID","abort","uploadRemote","fetch","remote","url","credentials","body","stringify","size","fieldname","then","res","statusText","json","token","host","getSocketHost","socket","progressData","emitSocketProgress","close","selectForUpload","files","i","parseInt","length","isRemote","fileIDs","Promise","map","getFile","once","install","addUploader","uninstall","removeUploader"],"mappings":"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","file":"XHRUpload.js","sourcesContent":["const Plugin = require('./Plugin')\nconst UppySocket = require('../core/UppySocket')\nconst Utils = require('../core/Utils')\n\nmodule.exports = class XHRUpload extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'XHRUpload'\n    this.title = 'XHRUpload'\n\n    // Default options\n    const defaultOptions = {\n      formData: true,\n      fieldName: 'files[]',\n      method: 'post',\n      metaFields: null,\n      responseUrlFieldName: 'url',\n      bundle: true,\n      headers: {},\n      getResponseData (xhr) {\n        return JSON.parse(xhr.response)\n      },\n      getResponseError (xhr) {\n        return new Error('Upload error')\n      }\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  createFormDataUpload (file, opts) {\n    const formPost = new FormData()\n\n    const metaFields = Array.isArray(opts.metaFields)\n      ? opts.metaFields\n      // Send along all fields by default.\n      : Object.keys(file.meta)\n    metaFields.forEach((item) => {\n      formPost.append(item, file.meta[item])\n    })\n\n    formPost.append(opts.fieldName, file.data)\n\n    return formPost\n  }\n\n  createBareUpload (file, opts) {\n    return file.data\n  }\n\n  upload (file, current, total) {\n    const opts = Object.assign({},\n      this.opts,\n      this.core.state.xhrUpload || {},\n      file.xhrUpload || {}\n    )\n\n    this.core.log(`uploading ${current} of ${total}`)\n    return new Promise((resolve, reject) => {\n      const data = opts.formData\n        ? this.createFormDataUpload(file, opts)\n        : this.createBareUpload(file, opts)\n\n      const xhr = new XMLHttpRequest()\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        if (ev.lengthComputable) {\n          this.core.emit('core:upload-progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        }\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const resp = opts.getResponseData(xhr)\n          const uploadURL = resp[opts.responseUrlFieldName]\n\n          this.core.emit('core:upload-success', file.id, resp, uploadURL)\n\n          if (uploadURL) {\n            this.core.log(`Download ${file.name} from ${file.uploadURL}`)\n          }\n\n          return resolve(file)\n        } else {\n          const error = opts.getResponseError(xhr) || new Error('Upload error')\n          error.request = xhr\n          this.core.emit('core:upload-error', file.id, error)\n          return reject(error)\n        }\n\n        // var upload = {}\n        //\n        // if (opts.bundle) {\n        //   upload = {files: files}\n        // } else {\n        //   upload = {file: files[current]}\n        // }\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        this.core.emit('core:upload-error', file.id)\n        return reject(new Error('Upload error'))\n      })\n\n      xhr.open(opts.method.toUpperCase(), opts.endpoint, true)\n\n      Object.keys(opts.headers).forEach((header) => {\n        xhr.setRequestHeader(header, opts.headers[header])\n      })\n\n      xhr.send(data)\n\n      this.core.on('core:upload-cancel', (fileID) => {\n        if (fileID === file.id) {\n          xhr.abort()\n        }\n      })\n\n      this.core.on('core:cancel-all', () => {\n        // const files = this.core.getState().files\n        // if (!files[file.id]) return\n        xhr.abort()\n      })\n\n      this.core.emit('core:upload-started', file.id)\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    const opts = Object.assign({}, this.opts, file.xhrUpload || {})\n    return new Promise((resolve, reject) => {\n      this.core.emit('core:upload-started', file.id)\n\n      fetch(file.remote.url, {\n        method: 'post',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.assign({}, file.remote.body, {\n          endpoint: opts.endpoint,\n          size: file.data.size,\n          fieldname: opts.fieldName\n        }))\n      })\n      .then((res) => {\n        if (res.status < 200 && res.status > 300) {\n          return reject(res.statusText)\n        }\n\n        res.json().then((data) => {\n          const token = data.token\n          const host = Utils.getSocketHost(file.remote.host)\n          const socket = new UppySocket({ target: `${host}/api/${token}` })\n\n          socket.on('progress', (progressData) => Utils.emitSocketProgress(this, progressData, file))\n\n          socket.on('success', (data) => {\n            this.core.emit('core:upload-success', file.id, data, data.url)\n            socket.close()\n            return resolve()\n          })\n        })\n      })\n    })\n  }\n\n  selectForUpload (files) {\n    files.forEach((file, i) => {\n      const current = parseInt(i, 10) + 1\n      const total = files.length\n\n      if (file.isRemote) {\n        this.uploadRemote(file, current, total)\n      } else {\n        this.upload(file, current, total)\n      }\n    })\n\n    //   if (this.opts.bundle) {\n    //     uploaders.push(this.upload(files, 0, files.length))\n    //   } else {\n    //     for (let i in files) {\n    //       uploaders.push(this.upload(files, i, files.length))\n    //     }\n    //   }\n  }\n\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.core.log('XHRUpload: no files to upload!')\n      return Promise.resolve()\n    }\n\n    this.core.log('XHRUpload is uploading...')\n    const files = fileIDs.map(getFile, this)\n    function getFile (fileID) {\n      return this.core.state.files[fileID]\n    }\n\n    this.selectForUpload(files)\n\n    return new Promise((resolve) => {\n      this.core.once('core:upload-complete', resolve)\n    })\n  }\n\n  install () {\n    this.core.addUploader(this.handleUpload)\n  }\n\n  uninstall () {\n    this.core.removeUploader(this.handleUpload)\n  }\n}\n"]}