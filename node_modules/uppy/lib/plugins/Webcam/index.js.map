{"version":3,"sources":["../../../src/plugins/Webcam/index.js"],"names":["Plugin","require","WebcamProvider","Translator","extend","getFileTypeExtension","supportsMediaRecorder","WebcamIcon","CameraScreen","PermissionsScreen","module","exports","core","opts","userMedia","protocol","location","match","type","id","title","icon","focus","bind","defaultLocale","strings","smile","defaultOptions","enableFlash","onBeforeSnapshot","Promise","resolve","countdown","locale","modes","params","swfURL","width","height","dest_width","dest_height","image_format","jpeg_quality","enable_flash","force_flash","flip_horiz","fps","upload_name","constraints","flashNotDetectedText","noInterfaceFoundText","unfreeze_snap","translator","i18n","translate","install","updateState","render","start","stop","takeSnapshot","startRecording","stopRecording","oneTwoThreeSmile","webcam","webcamActive","newState","state","setState","then","stream","cameraReady","catch","err","cameraError","recorder","MediaRecorder","recordingChunks","addEventListener","event","push","data","isRecording","reject","mimeType","fileExtension","Error","file","source","name","Date","now","Blob","addFile","getAudioTracks","forEach","track","getVideoTracks","streamSrc","count","countDown","setInterval","clearInterval","captureInProgress","info","setTimeout","videoEl","target","querySelector","video","image","getImage","tagFile","useTheFlash","URL","createObjectURL","onSnapshot","onStartRecording","onStopRecording","onFocus","onStop","supportsRecording","recording","getSWFHTML","src","init","plugin","mount","uninstall","reset","unmount"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\nconst WebcamProvider = require('../../uppy-base/src/plugins/Webcam')\nconst Translator = require('../../core/Translator')\nconst { extend,\n        getFileTypeExtension,\n        supportsMediaRecorder } = require('../../core/Utils')\nconst WebcamIcon = require('./WebcamIcon')\nconst CameraScreen = require('./CameraScreen')\nconst PermissionsScreen = require('./PermissionsScreen')\n\n/**\n * Webcam\n */\nmodule.exports = class Webcam extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.userMedia = true\n    this.protocol = location.protocol.match(/https/i) ? 'https' : 'http'\n    this.type = 'acquirer'\n    this.id = 'Webcam'\n    this.title = 'Webcam'\n    this.icon = WebcamIcon\n    this.focus = this.focus.bind(this)\n\n    const defaultLocale = {\n      strings: {\n        smile: 'Smile!'\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      enableFlash: true,\n      onBeforeSnapshot: () => Promise.resolve(),\n      countdown: false,\n      locale: defaultLocale,\n      modes: [\n        'video-audio',\n        'video-only',\n        'audio-only',\n        'picture'\n      ]\n    }\n\n    this.params = {\n      swfURL: 'webcam.swf',\n      width: 400,\n      height: 300,\n      dest_width: 800,         // size of captured image\n      dest_height: 600,        // these default to width/height\n      image_format: 'jpeg',  // image format (may be jpeg or png)\n      jpeg_quality: 90,      // jpeg image quality from 0 (worst) to 100 (best)\n      enable_flash: true,    // enable flash fallback,\n      force_flash: false,    // force flash mode,\n      flip_horiz: false,     // flip image horiz (mirror mode)\n      fps: 30,               // camera frames per second\n      upload_name: 'webcam', // name of file in upload post data\n      constraints: null,     // custom user media constraints,\n      flashNotDetectedText: 'ERROR: No Adobe Flash Player detected.  Webcam.js relies on Flash for browsers that do not support getUserMedia (like yours).',\n      noInterfaceFoundText: 'No supported webcam interface found.',\n      unfreeze_snap: true    // Whether to unfreeze the camera after snap (defaults to true)\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({locale: this.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.install = this.install.bind(this)\n    this.updateState = this.updateState.bind(this)\n\n    this.render = this.render.bind(this)\n\n    // Camera controls\n    this.start = this.start.bind(this)\n    this.stop = this.stop.bind(this)\n    this.takeSnapshot = this.takeSnapshot.bind(this)\n    this.startRecording = this.startRecording.bind(this)\n    this.stopRecording = this.stopRecording.bind(this)\n    this.oneTwoThreeSmile = this.oneTwoThreeSmile.bind(this)\n    // this.justSmile = this.justSmile.bind(this)\n\n    this.webcam = new WebcamProvider(this.opts, this.params)\n    this.webcamActive = false\n\n    if (this.opts.countdown) {\n      this.opts.onBeforeSnapshot = this.oneTwoThreeSmile\n    }\n\n    // if (typeof opts.onBeforeSnapshot === 'undefined' || !this.opts.onBeforeSnapshot) {\n    //   if (this.opts.countdown) {\n    //     this.opts.onBeforeSnapshot = this.oneTwoThreeSmile\n    //   } else {\n    //     this.opts.onBeforeSnapshot = this.justSmile\n    //   }\n    // }\n  }\n\n  /**\n   * Little shorthand to update the state with my new state\n   */\n  updateState (newState) {\n    const {state} = this.core\n    const webcam = Object.assign({}, state.webcam, newState)\n\n    this.core.setState({webcam})\n  }\n\n  start () {\n    this.webcamActive = true\n\n    this.webcam.start()\n      .then((stream) => {\n        this.stream = stream\n        this.updateState({\n          // videoStream: stream,\n          cameraReady: true\n        })\n      })\n      .catch((err) => {\n        this.updateState({\n          cameraError: err\n        })\n      })\n  }\n\n  startRecording () {\n    // TODO We can check here if any of the mime types listed in the\n    // mimeToExtensions map in Utils.js are supported, and prefer to use one of\n    // those.\n    // Right now we let the browser pick a type that it deems appropriate.\n    this.recorder = new MediaRecorder(this.stream)\n    this.recordingChunks = []\n    this.recorder.addEventListener('dataavailable', (event) => {\n      this.recordingChunks.push(event.data)\n    })\n    this.recorder.start()\n\n    this.updateState({\n      isRecording: true\n    })\n  }\n\n  stopRecording () {\n    return new Promise((resolve, reject) => {\n      this.recorder.addEventListener('stop', () => {\n        this.updateState({\n          isRecording: false\n        })\n\n        const mimeType = this.recordingChunks[0].type\n        const fileExtension = getFileTypeExtension(mimeType)\n\n        if (!fileExtension) {\n          reject(new Error(`Could not upload file: Unsupported media type \"${mimeType}\"`))\n          return\n        }\n\n        const file = {\n          source: this.id,\n          name: `webcam-${Date.now()}.${fileExtension}`,\n          type: mimeType,\n          data: new Blob(this.recordingChunks, { type: mimeType })\n        }\n\n        this.core.addFile(file)\n\n        this.recordingChunks = null\n        this.recorder = null\n\n        resolve()\n      })\n\n      this.recorder.stop()\n    })\n  }\n\n  stop () {\n    this.stream.getAudioTracks().forEach((track) => {\n      track.stop()\n    })\n    this.stream.getVideoTracks().forEach((track) => {\n      track.stop()\n    })\n    this.webcamActive = false\n    this.stream = null\n    this.streamSrc = null\n  }\n\n  oneTwoThreeSmile () {\n    return new Promise((resolve, reject) => {\n      let count = this.opts.countdown\n\n      let countDown = setInterval(() => {\n        if (!this.webcamActive) {\n          clearInterval(countDown)\n          this.captureInProgress = false\n          return reject('Webcam is not active')\n        }\n\n        if (count > 0) {\n          this.core.info(`${count}...`, 'warning', 800)\n          count--\n        } else {\n          clearInterval(countDown)\n          this.core.info(this.i18n('smile'), 'success', 1500)\n          setTimeout(() => resolve(), 1500)\n        }\n      }, 1000)\n    })\n  }\n\n  // justSmile () {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => this.core.info(this.i18n('smile'), 'success', 1000), 1500)\n  //     setTimeout(() => resolve(), 2000)\n  //   })\n  // }\n\n  takeSnapshot () {\n    const opts = {\n      name: `webcam-${Date.now()}.jpg`,\n      mimeType: 'image/jpeg'\n    }\n\n    this.videoEl = this.target.querySelector('.UppyWebcam-video')\n\n    if (this.captureInProgress) return\n    this.captureInProgress = true\n\n    this.opts.onBeforeSnapshot().catch((err) => {\n      this.core.info(err, 'error', 5000)\n      return Promise.reject(`onBeforeSnapshot: ${err}`)\n    }).then(() => {\n      const video = this.target.querySelector('.UppyWebcam-video')\n      if (!video) {\n        this.captureInProgress = false\n        return Promise.reject('No video element found, likely due to the Webcam tab being closed.')\n      }\n\n      const image = this.webcam.getImage(video, opts)\n\n      const tagFile = {\n        source: this.id,\n        name: opts.name,\n        data: image.data,\n        type: opts.mimeType\n      }\n\n      this.captureInProgress = false\n      this.core.addFile(tagFile)\n    })\n  }\n\n  focus () {\n    if (this.opts.countdown) return\n    setTimeout(() => {\n      this.core.info(this.i18n('smile'), 'success', 1500)\n    }, 1000)\n  }\n\n  render (state) {\n    if (!this.webcamActive) {\n      this.start()\n    }\n\n    if (!state.webcam.cameraReady && !state.webcam.useTheFlash) {\n      return PermissionsScreen(state.webcam)\n    }\n\n    if (!this.streamSrc) {\n      this.streamSrc = this.stream ? URL.createObjectURL(this.stream) : null\n    }\n\n    return CameraScreen(extend(state.webcam, {\n      onSnapshot: this.takeSnapshot,\n      onStartRecording: this.startRecording,\n      onStopRecording: this.stopRecording,\n      onFocus: this.focus,\n      onStop: this.stop,\n      modes: this.opts.modes,\n      supportsRecording: supportsMediaRecorder(),\n      recording: state.webcam.isRecording,\n      getSWFHTML: this.webcam.getSWFHTML,\n      src: this.streamSrc\n    }))\n  }\n\n  install () {\n    this.webcam.init()\n    this.core.setState({\n      webcam: {\n        cameraReady: false\n      }\n    })\n\n    const target = this.opts.target\n    const plugin = this\n    this.target = this.mount(target, plugin)\n  }\n\n  uninstall () {\n    this.webcam.reset()\n    this.unmount()\n  }\n}\n"]}