{"version":3,"sources":["../../src/plugins/Plugin.js"],"names":["yo","require","nanoraf","findDOMElement","getFormData","module","exports","core","opts","replaceTargetContent","update","bind","mount","install","uninstall","state","el","updateUI","target","plugin","callerPluginName","id","targetElement","render","log","getMetaFromForm","nodeName","formMeta","setMeta","innerHTML","appendChild","Target","targetPluginName","targetPlugin","getPlugin","selectorTarget","addTarget","unmount","parentNode","removeChild"],"mappings":"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","file":"Plugin.js","sourcesContent":["const yo = require('yo-yo')\nconst nanoraf = require('nanoraf')\nconst { findDOMElement } = require('../core/Utils')\nconst getFormData = require('get-form-data')\n\n/**\n * Boilerplate that all Plugins share - and should not be used\n * directly. It also shows which methods final plugins should implement/override,\n * this deciding on structure.\n *\n * @param {object} main Uppy core object\n * @param {object} object with plugin options\n * @return {array | string} files or success/fail message\n */\nmodule.exports = class Plugin {\n\n  constructor (core, opts) {\n    this.core = core\n    this.opts = opts || {}\n\n    // clear everything inside the target selector\n    this.opts.replaceTargetContent === this.opts.replaceTargetContent || true\n\n    this.update = this.update.bind(this)\n    this.mount = this.mount.bind(this)\n    this.install = this.install.bind(this)\n    this.uninstall = this.uninstall.bind(this)\n  }\n\n  update (state) {\n    if (typeof this.el === 'undefined') {\n      return\n    }\n\n    if (this.updateUI) {\n      this.updateUI(state)\n    }\n  }\n\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   *\n   * @param {String|Object} target\n   *\n   */\n  mount (target, plugin) {\n    const callerPluginName = plugin.id\n\n    const targetElement = findDOMElement(target)\n\n    // Set up nanoraf.\n    this.updateUI = nanoraf((state) => {\n      this.el = yo.update(this.el, this.render(state))\n    })\n\n    if (targetElement) {\n      this.core.log(`Installing ${callerPluginName} to a DOM element`)\n\n      // attempt to extract meta from form element\n      if (this.opts.getMetaFromForm && targetElement.nodeName === 'FORM') {\n        const formMeta = getFormData(targetElement)\n        this.core.setMeta(formMeta)\n      }\n\n      // clear everything inside the target container\n      if (this.opts.replaceTargetContent) {\n        targetElement.innerHTML = ''\n      }\n\n      this.el = plugin.render(this.core.state)\n      targetElement.appendChild(this.el)\n\n      return targetElement\n    } else {\n      // TODO: is instantiating the plugin really the way to roll\n      // just to get the plugin name?\n      const Target = target\n      const targetPluginName = new Target().id\n\n      this.core.log(`Installing ${callerPluginName} to ${targetPluginName}`)\n\n      const targetPlugin = this.core.getPlugin(targetPluginName)\n      const selectorTarget = targetPlugin.addTarget(plugin)\n\n      return selectorTarget\n    }\n  }\n\n  unmount () {\n    if (this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el)\n    }\n  }\n\n  install () {\n    return\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}