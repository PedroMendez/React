'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports.default = SpeechRecognitionDecorator;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _coreDecorators = require('core-decorators');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function SpeechRecognitionDecorator(WrappedComponent) {
  var _dec, _desc, _value, _class;

  return _dec = (0, _coreDecorators.debounce)(1000), (_class = (function (_Component) {
    _inherits(SpeechRecognitionContainer, _Component);

    function SpeechRecognitionContainer(props) {
      _classCallCheck(this, SpeechRecognitionContainer);

      var _this = _possibleConstructorReturn(this, (SpeechRecognitionContainer.__proto__ || Object.getPrototypeOf(SpeechRecognitionContainer)).call(this, props));

      _this.state = {
        interimTranscript: '',
        finalTranscript: '',
        recognition: null,
        browserSupportsSpeechRecognition: true
      };
      return _this;
    }

    _createClass(SpeechRecognitionContainer, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var root = typeof window !== 'undefined' ? window : this;
        var BrowserSpeechRecognition = root.SpeechRecognition || root.webkitSpeechRecognition || root.mozSpeechRecognition || root.msSpeechRecognition || root.oSpeechRecognition;
        if (BrowserSpeechRecognition) {
          var recognition = new BrowserSpeechRecognition();
          recognition.continuous = true;
          recognition.interimResults = true;

          recognition.onresult = this.updateTranscript.bind(this);
          recognition.onend = this.restartRecognition.bind(this);
          recognition.start();
          this.setState({ recognition: recognition });
        } else {
          this.setState({ browserSupportsSpeechRecognition: false });
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.state.recognition) {
          this.state.recognition.abort();
        }
      }
    }, {
      key: 'restartRecognition',
      value: function restartRecognition() {
        this.state.recognition.start();
      }
    }, {
      key: 'updateTranscript',
      value: function updateTranscript(event) {
        var _getNewTranscript = this.getNewTranscript(event),
            finalTranscript = _getNewTranscript.finalTranscript,
            interimTranscript = _getNewTranscript.interimTranscript;

        this.setState({ finalTranscript: finalTranscript, interimTranscript: interimTranscript });
      }
    }, {
      key: 'getNewTranscript',
      value: function getNewTranscript(event) {
        var finalTranscript = this.state.finalTranscript;
        var interimTranscript = '';
        for (var i = event.resultIndex; i < event.results.length; ++i) {
          if (event.results[i].isFinal) {
            finalTranscript = this.concatTranscripts(finalTranscript, event.results[i][0].transcript);
          } else {
            interimTranscript = this.concatTranscripts(interimTranscript, event.results[i][0].transcript);
          }
        }
        return { finalTranscript: finalTranscript, interimTranscript: interimTranscript };
      }
    }, {
      key: 'concatTranscripts',
      value: function concatTranscripts() {
        for (var _len = arguments.length, transcriptParts = Array(_len), _key = 0; _key < _len; _key++) {
          transcriptParts[_key] = arguments[_key];
        }

        return transcriptParts.map(function (t) {
          return t.trim();
        }).join(' ').trim();
      }
    }, {
      key: 'resetTranscript',
      value: function resetTranscript() {
        this.setState({ interimTranscript: '', finalTranscript: '' });
        this.state.recognition.abort();
      }
    }, {
      key: 'render',
      value: function render() {
        var _state = this.state,
            finalTranscript = _state.finalTranscript,
            interimTranscript = _state.interimTranscript;

        var transcript = this.concatTranscripts(finalTranscript, interimTranscript);

        return _react2.default.createElement(WrappedComponent, _extends({
          resetTranscript: this.resetTranscript,
          transcript: transcript
        }, this.state, this.props));
      }
    }]);

    return SpeechRecognitionContainer;
  })(_react.Component), (_applyDecoratedDescriptor(_class.prototype, 'restartRecognition', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'restartRecognition'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'resetTranscript', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'resetTranscript'), _class.prototype)), _class);
}